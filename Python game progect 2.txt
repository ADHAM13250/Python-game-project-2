import random
import time

# Countdown before mission start for dramatic effect
def countdown():
    print("Gear up... the mission is starting.")
    for i in range(3, 0, -1):
        print(f"{i}...")
        time.sleep(1)
    print("Go go go!\n")

## Allow player to choose an agent with abilities and starting stats
def choose_agent():
    print("Welcome, Operative.")
    print("You’re about to enter a high-stakes simulation inspired by Valorant.")
    print("Every decision you make can shift the tide of battle.\n")

    print("Pick your agent for today’s op:")

    agents = {
        '1': {"name": "Yoru", "role": "Duelist", "abilities": {"flash": 2, "rift": 2, "clone": 1, "gatecrash": 1}, "score": 0, "kills": 0, "inventory": [], "points": 20, "energy": 0},
        '2': {"name": "Chamber", "role": "Sentinel", "abilities": {"headhunter": 2, "trademark": 1, "teleport": 1}, "score": 0, "kills": 0, "inventory": [], "points": 20, "energy": 0},
        '3': {"name": "Omen", "role": "Controller", "abilities": {"smoke": 2, "paranoia": 1, "shrouded_step": 1, "dark_cover": 1}, "score": 0, "kills": 0, "inventory": [], "points": 20, "energy": 0},
        '4': {"name": "KAY/O", "role": "Initiator", "abilities": {"frag": 2, "zero_point": 1, "suppression": 1}, "score": 0, "kills": 0, "inventory": [], "points": 20, "energy": 0},
        '5': {"name": "Jett", "role": "Duelist", "abilities": {"dash": 1, "updraft": 2, "smoke": 2}, "score": 0, "kills": 0, "inventory": [], "points": 20, "energy": 0},
        '6': {"name": "Fade", "role": "Initiator", "abilities": {"prowler": 2, "seize": 1, "haunt": 2}, "score": 0, "kills": 0, "inventory": [], "points": 20, "energy": 0},
        '7': {"name": "Killjoy", "role": "Sentinel", "abilities": {"turret": 1, "alarmbot": 1, "nanoswarm": 2}, "score": 0, "kills": 0, "inventory": [], "points": 20, "energy": 0},
        '8': {"name": "Brimstone", "role": "Controller", "abilities": {"stim": 1, "smoke": 3, "molly": 1}, "score": 0, "kills": 0, "inventory": [], "points": 20, "energy": 0},
    }

    name_to_key = {val["name"].lower(): key for key, val in agents.items()}

    while True:
        for key, val in agents.items():
            print(f"{key}. {val['name']} ({val['role']})")

        choice = input("Pick by number or agent name: ").strip().lower()

        if choice in agents:
            agent = agents[choice]
            break
        elif choice in name_to_key:
            agent = agents[name_to_key[choice]]
            break
        else:
            print("Invalid input. Please enter a valid number or agent name.\n")

    print(f"\nYou're going in as {agent['name']}. Lock it in.\n")
    return agent


# Weapon buying system using points
def buy_weapons(agent):
    print("--- Loadout Phase ---")
    print("You’ve got 20 credits to spend. Choose wisely.")
    print("Options: Vandal (15), Sheriff (5), Operator (20), Judge (10)")

    while agent["points"] >= 5:
        choice = input("Type weapon name or 'done': ").lower()
        if choice == "vandal" and agent["points"] >= 15:
            agent["inventory"].append("Vandal")
            agent["points"] -= 15
            print("Locked in the Vandal.")
        elif choice == "sheriff" and agent["points"] >= 5:
            agent["inventory"].append("Sheriff")
            agent["points"] -= 5
            print("Sheriff ready.")
        elif choice == "operator" and agent["points"] >= 20:
            agent["inventory"].append("Operator")
            agent["points"] -= 20
            print("Sniper online.")
        elif choice == "judge" and agent["points"] >= 10:
            agent["inventory"].append("Judge")
            agent["points"] -= 10
            print("Boomstick acquired.")
        elif choice == "done":
            break
        else:
            print("Either you can’t afford that, or it’s not real.")

    print(f"Your loadout: {agent['inventory']} | Leftover points: {agent['points']}\n")

# Use an ability (if available)
def use_ability(agent, ability):
    if ability in agent["abilities"] and agent["abilities"][ability] > 0:
        print(f"You use {ability}. Tactical move.")
        agent["abilities"][ability] -= 1
        agent["energy"] += 5
    else:
        print("No charges left or wrong input.")

# Unexpected betrayal story event
def surprise_twist():
    print("--- Unexpected Intel ---")
    print("Fade sends a cryptic ping: ‘We’ve been compromised.’")
    print("Someone on your squad is feeding info to the enemy.")
    choice = input("Do you 'trust' your squad or 'interrogate' Fade? ").lower()

    if choice == "trust":
        print("You stay focused, ignoring the paranoia.")
        return True
    elif choice == "interrogate":
        print("Fade resists at first, but you catch the glitch in her comms.")
        print("She draws a pistol. You drop her first.")
        return True
    else:
        print("You froze. She didn’t. You’re out.")
        return False

# Core encounter choice - engage, rotate, or hold
def encounter_enemy(agent):
    print("--- Contact ---")
    print("You hear steps. Close.")
    move = input("‘Peek’, ‘rotate’, or ‘hold’? ").lower()

    if move == "peek":
        print("You swing the corner...")
        if random.random() > 0.4:
            print("Enemy down!")
            agent["kills"] += 1
            agent["score"] += 5
            return True
        else:
            print("They were faster. You're hit.")
            return False
    elif move == "rotate":
        print("You outplayed them. Smart move.")
        agent["score"] += 3
        return True
    elif move == "hold":
        print("You wait... they never come. Wasted chance.")
        return True
    else:
        print("You hesitated. That's fatal.")
        return False

# End-of-round spike interaction
def spike_scenario(agent):
    print("--- Spike Site ---")
    choice = input("Plant the spike or fake it? (‘plant’ / ‘fake’): ").lower()
    if choice == "plant":
        print("Spike planted. Now hold the line.")
        agent["score"] += 5
    elif choice == "fake":
        print("You faked the plant—enemy peeked—boom! One tap.")
        agent["kills"] += 1
        agent["score"] += 7
    else:
        print("You hesitated too long. They pushed and you lost the spike.")

# Recap of the player's stats after the round
def round_summary(agent):
    print("\n--- Mission Summary ---")
    print(f"Agent: {agent['name']}")
    print(f"Kills: {agent['kills']}")
    print(f"Score: {agent['score']}")
    print(f"Energy: {agent['energy']}")
    print(f"Abilities Left: {agent['abilities']}")
    print(f"Loadout: {agent['inventory']}\n")

# Main mission sequence
def main():
    print("== Valorant: Shadow Operation ==")
    print("Your decisions shape the mission. Let’s get started.\n")

    agent = choose_agent()
    buy_weapons(agent)
    countdown()

    if not surprise_twist():
        print("Mission failed. Fade played you.")
        return

    print("You’re in. Make your move.")
    print(f"Abilities: {agent['abilities']}")
    chosen_ability = input("Use an ability (type name or 'none'): ").lower()
    if chosen_ability != "none":
        use_ability(agent, chosen_ability)

    if not encounter_enemy(agent):
        print("You’ve been eliminated.")
        return

    spike_scenario(agent)
    agent["energy"] += 10
    round_summary(agent)

# Run the mission loop
if __name__ == "__main__":

 while True:
    main()

    while True:
        again = input("Play another round? (yes/no): ").lower()
        if again == "yes":
            break  # Goes back to the outer loop
        elif again == "no":
            print("Mission complete. Stay sharp, Agent.")
            should_exit = True
            break  # Break inner loop and check flag
        else:
            print("Invalid input. Please type 'yes' or 'no'.")

    if 'should_exit' in locals() and should_exit:
        break  # Break the outer loop
